//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MusicMink
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MusicMink.MusicMink_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[45];
            _typeNameTable[0] = "MusicMink.Converters.BoolToVisibilityConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Boolean";
            _typeNameTable[3] = "MusicMink.Controls.ScalingTextBox";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[5] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[6] = "String";
            _typeNameTable[7] = "Double";
            _typeNameTable[8] = "MusicMink.Controls.StarRater";
            _typeNameTable[9] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[10] = "UInt32";
            _typeNameTable[11] = "MusicMink.Dialogs.AddPlaylist";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.ContentDialog";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[14] = "MusicMink.Dialogs.AddToPlaylist";
            _typeNameTable[15] = "MusicMink.Dialogs.EditAlbum";
            _typeNameTable[16] = "MusicMink.Dialogs.EditPlaylist";
            _typeNameTable[17] = "MusicMink.Dialogs.EditSong";
            _typeNameTable[18] = "MusicMink.ListItems.AlbumListItem";
            _typeNameTable[19] = "MusicMink.ListItems.ArtistListItem";
            _typeNameTable[20] = "MusicMink.ListItems.PlaylistListItem";
            _typeNameTable[21] = "MusicMink.Converters.IntegerToVisibilityConverter";
            _typeNameTable[22] = "Int32";
            _typeNameTable[23] = "MusicMink.ListItems.PlayQueueListItem";
            _typeNameTable[24] = "MusicMink.ListItems.SongListItem";
            _typeNameTable[25] = "MusicMink.ListItems.SongListItemView";
            _typeNameTable[26] = "System.Enum";
            _typeNameTable[27] = "System.ValueType";
            _typeNameTable[28] = "MusicMink.Converters.ReorderModeToBoolConverter";
            _typeNameTable[29] = "MusicMink.Converters.PercentageTransformConverter";
            _typeNameTable[30] = "MusicMink.Converters.BoolToObjectConverter";
            _typeNameTable[31] = "MusicMink.MainPage";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[33] = "MusicMink.Pages.BasePage";
            _typeNameTable[34] = "MusicMink.Pages.ArtistPage";
            _typeNameTable[35] = "MusicMink.Pages.ArtistList";
            _typeNameTable[36] = "MusicMink.Converters.NumericTransformConverter";
            _typeNameTable[37] = "MusicMink.Pages.AlbumList";
            _typeNameTable[38] = "MusicMink.Pages.PlaylistPage";
            _typeNameTable[39] = "MusicMink.Pages.AlbumPage";
            _typeNameTable[40] = "MusicMink.Pages.HomePage";
            _typeNameTable[41] = "MusicMink.Pages.ManageLibrary";
            _typeNameTable[42] = "MusicMink.Pages.PlaylistList";
            _typeNameTable[43] = "MusicMink.Pages.Settings";
            _typeNameTable[44] = "MusicMink.Pages.SongList";

            _typeTable = new global::System.Type[45];
            _typeTable[0] = typeof(global::MusicMink.Converters.BoolToVisibilityConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::System.Boolean);
            _typeTable[3] = typeof(global::MusicMink.Controls.ScalingTextBox);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[6] = typeof(global::System.String);
            _typeTable[7] = typeof(global::System.Double);
            _typeTable[8] = typeof(global::MusicMink.Controls.StarRater);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[10] = typeof(global::System.UInt32);
            _typeTable[11] = typeof(global::MusicMink.Dialogs.AddPlaylist);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.ContentDialog);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[14] = typeof(global::MusicMink.Dialogs.AddToPlaylist);
            _typeTable[15] = typeof(global::MusicMink.Dialogs.EditAlbum);
            _typeTable[16] = typeof(global::MusicMink.Dialogs.EditPlaylist);
            _typeTable[17] = typeof(global::MusicMink.Dialogs.EditSong);
            _typeTable[18] = typeof(global::MusicMink.ListItems.AlbumListItem);
            _typeTable[19] = typeof(global::MusicMink.ListItems.ArtistListItem);
            _typeTable[20] = typeof(global::MusicMink.ListItems.PlaylistListItem);
            _typeTable[21] = typeof(global::MusicMink.Converters.IntegerToVisibilityConverter);
            _typeTable[22] = typeof(global::System.Int32);
            _typeTable[23] = typeof(global::MusicMink.ListItems.PlayQueueListItem);
            _typeTable[24] = typeof(global::MusicMink.ListItems.SongListItem);
            _typeTable[25] = typeof(global::MusicMink.ListItems.SongListItemView);
            _typeTable[26] = typeof(global::System.Enum);
            _typeTable[27] = typeof(global::System.ValueType);
            _typeTable[28] = typeof(global::MusicMink.Converters.ReorderModeToBoolConverter);
            _typeTable[29] = typeof(global::MusicMink.Converters.PercentageTransformConverter);
            _typeTable[30] = typeof(global::MusicMink.Converters.BoolToObjectConverter);
            _typeTable[31] = typeof(global::MusicMink.MainPage);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[33] = typeof(global::MusicMink.Pages.BasePage);
            _typeTable[34] = typeof(global::MusicMink.Pages.ArtistPage);
            _typeTable[35] = typeof(global::MusicMink.Pages.ArtistList);
            _typeTable[36] = typeof(global::MusicMink.Converters.NumericTransformConverter);
            _typeTable[37] = typeof(global::MusicMink.Pages.AlbumList);
            _typeTable[38] = typeof(global::MusicMink.Pages.PlaylistPage);
            _typeTable[39] = typeof(global::MusicMink.Pages.AlbumPage);
            _typeTable[40] = typeof(global::MusicMink.Pages.HomePage);
            _typeTable[41] = typeof(global::MusicMink.Pages.ManageLibrary);
            _typeTable[42] = typeof(global::MusicMink.Pages.PlaylistList);
            _typeTable[43] = typeof(global::MusicMink.Pages.Settings);
            _typeTable[44] = typeof(global::MusicMink.Pages.SongList);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BoolToVisibilityConverter() { return new global::MusicMink.Converters.BoolToVisibilityConverter(); }
        private object Activate_3_ScalingTextBox() { return new global::MusicMink.Controls.ScalingTextBox(); }
        private object Activate_8_StarRater() { return new global::MusicMink.Controls.StarRater(); }
        private object Activate_11_AddPlaylist() { return new global::MusicMink.Dialogs.AddPlaylist(); }
        private object Activate_18_AlbumListItem() { return new global::MusicMink.ListItems.AlbumListItem(); }
        private object Activate_19_ArtistListItem() { return new global::MusicMink.ListItems.ArtistListItem(); }
        private object Activate_20_PlaylistListItem() { return new global::MusicMink.ListItems.PlaylistListItem(); }
        private object Activate_21_IntegerToVisibilityConverter() { return new global::MusicMink.Converters.IntegerToVisibilityConverter(); }
        private object Activate_23_PlayQueueListItem() { return new global::MusicMink.ListItems.PlayQueueListItem(); }
        private object Activate_24_SongListItem() { return new global::MusicMink.ListItems.SongListItem(); }
        private object Activate_28_ReorderModeToBoolConverter() { return new global::MusicMink.Converters.ReorderModeToBoolConverter(); }
        private object Activate_29_PercentageTransformConverter() { return new global::MusicMink.Converters.PercentageTransformConverter(); }
        private object Activate_30_BoolToObjectConverter() { return new global::MusicMink.Converters.BoolToObjectConverter(); }
        private object Activate_31_MainPage() { return new global::MusicMink.MainPage(); }
        private object Activate_33_BasePage() { return new global::MusicMink.Pages.BasePage(); }
        private object Activate_34_ArtistPage() { return new global::MusicMink.Pages.ArtistPage(); }
        private object Activate_35_ArtistList() { return new global::MusicMink.Pages.ArtistList(); }
        private object Activate_36_NumericTransformConverter() { return new global::MusicMink.Converters.NumericTransformConverter(); }
        private object Activate_37_AlbumList() { return new global::MusicMink.Pages.AlbumList(); }
        private object Activate_38_PlaylistPage() { return new global::MusicMink.Pages.PlaylistPage(); }
        private object Activate_39_AlbumPage() { return new global::MusicMink.Pages.AlbumPage(); }
        private object Activate_40_HomePage() { return new global::MusicMink.Pages.HomePage(); }
        private object Activate_41_ManageLibrary() { return new global::MusicMink.Pages.ManageLibrary(); }
        private object Activate_42_PlaylistList() { return new global::MusicMink.Pages.PlaylistList(); }
        private object Activate_43_Settings() { return new global::MusicMink.Pages.Settings(); }
        private object Activate_44_SongList() { return new global::MusicMink.Pages.SongList(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MusicMink.Converters.BoolToVisibilityConverter
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_BoolToVisibilityConverter;
                userType.AddMemberName("Invert");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Boolean
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  MusicMink.Controls.ScalingTextBox
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_3_ScalingTextBox;
                userType.AddMemberName("Foreground");
                userType.AddMemberName("Text");
                userType.AddMemberName("MaxFontSize");
                userType.AddMemberName("MinFontSize");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  String
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Double
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  MusicMink.Controls.StarRater
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_8_StarRater;
                userType.AddMemberName("BorderColor");
                userType.AddMemberName("StarColor");
                userType.AddMemberName("Rating");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  UInt32
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  MusicMink.Dialogs.AddPlaylist
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.Activator = Activate_11_AddPlaylist;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.ContentDialog
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  MusicMink.Dialogs.AddToPlaylist
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  MusicMink.Dialogs.EditAlbum
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  MusicMink.Dialogs.EditPlaylist
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  MusicMink.Dialogs.EditSong
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  MusicMink.ListItems.AlbumListItem
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_AlbumListItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  MusicMink.ListItems.ArtistListItem
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_19_ArtistListItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  MusicMink.ListItems.PlaylistListItem
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_PlaylistListItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  MusicMink.Converters.IntegerToVisibilityConverter
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_IntegerToVisibilityConverter;
                userType.AddMemberName("PivotPoint");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Int32
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  MusicMink.ListItems.PlayQueueListItem
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_PlayQueueListItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  MusicMink.ListItems.SongListItem
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_24_SongListItem;
                userType.AddMemberName("ViewType");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  MusicMink.ListItems.SongListItemView
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("SongList", global::MusicMink.ListItems.SongListItemView.SongList);
                userType.AddEnumValue("AlbumPage", global::MusicMink.ListItems.SongListItemView.AlbumPage);
                userType.AddEnumValue("PlayQueue", global::MusicMink.ListItems.SongListItemView.PlayQueue);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  System.Enum
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 27:   //  System.ValueType
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  MusicMink.Converters.ReorderModeToBoolConverter
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_28_ReorderModeToBoolConverter;
                userType.AddMemberName("Invert");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  MusicMink.Converters.PercentageTransformConverter
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_PercentageTransformConverter;
                userType.AddMemberName("FullTarget");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  MusicMink.Converters.BoolToObjectConverter
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_BoolToObjectConverter;
                userType.AddMemberName("ValueIfTrue");
                userType.AddMemberName("ValueIfFalse");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  MusicMink.MainPage
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  MusicMink.Pages.BasePage
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_BasePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  MusicMink.Pages.ArtistPage
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_34_ArtistPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  MusicMink.Pages.ArtistList
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_35_ArtistList;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  MusicMink.Converters.NumericTransformConverter
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_NumericTransformConverter;
                userType.AddMemberName("Margin");
                userType.AddMemberName("Sections");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  MusicMink.Pages.AlbumList
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_37_AlbumList;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  MusicMink.Pages.PlaylistPage
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_38_PlaylistPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  MusicMink.Pages.AlbumPage
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_39_AlbumPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  MusicMink.Pages.HomePage
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_40_HomePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  MusicMink.Pages.ManageLibrary
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_41_ManageLibrary;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  MusicMink.Pages.PlaylistList
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_42_PlaylistList;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  MusicMink.Pages.Settings
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_43_Settings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  MusicMink.Pages.SongList
                userType = new global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicMink.Pages.BasePage"));
                userType.Activator = Activate_44_SongList;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_BoolToVisibilityConverter_Invert(object instance)
        {
            var that = (global::MusicMink.Converters.BoolToVisibilityConverter)instance;
            return that.Invert;
        }
        private void set_0_BoolToVisibilityConverter_Invert(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.BoolToVisibilityConverter)instance;
            that.Invert = (global::System.Boolean)Value;
        }
        private object get_1_ScalingTextBox_Foreground(object instance)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            return that.Foreground;
        }
        private void set_1_ScalingTextBox_Foreground(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_2_ScalingTextBox_Text(object instance)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            return that.Text;
        }
        private void set_2_ScalingTextBox_Text(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_3_ScalingTextBox_MaxFontSize(object instance)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            return that.MaxFontSize;
        }
        private void set_3_ScalingTextBox_MaxFontSize(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            that.MaxFontSize = (global::System.Double)Value;
        }
        private object get_4_ScalingTextBox_MinFontSize(object instance)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            return that.MinFontSize;
        }
        private void set_4_ScalingTextBox_MinFontSize(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.ScalingTextBox)instance;
            that.MinFontSize = (global::System.Double)Value;
        }
        private object get_5_StarRater_BorderColor(object instance)
        {
            var that = (global::MusicMink.Controls.StarRater)instance;
            return that.BorderColor;
        }
        private void set_5_StarRater_BorderColor(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.StarRater)instance;
            that.BorderColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_6_StarRater_StarColor(object instance)
        {
            var that = (global::MusicMink.Controls.StarRater)instance;
            return that.StarColor;
        }
        private void set_6_StarRater_StarColor(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.StarRater)instance;
            that.StarColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_7_StarRater_Rating(object instance)
        {
            var that = (global::MusicMink.Controls.StarRater)instance;
            return that.Rating;
        }
        private void set_7_StarRater_Rating(object instance, object Value)
        {
            var that = (global::MusicMink.Controls.StarRater)instance;
            that.Rating = (global::System.UInt32)Value;
        }
        private object get_8_IntegerToVisibilityConverter_PivotPoint(object instance)
        {
            var that = (global::MusicMink.Converters.IntegerToVisibilityConverter)instance;
            return that.PivotPoint;
        }
        private void set_8_IntegerToVisibilityConverter_PivotPoint(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.IntegerToVisibilityConverter)instance;
            that.PivotPoint = (global::System.Int32)Value;
        }
        private object get_9_SongListItem_ViewType(object instance)
        {
            var that = (global::MusicMink.ListItems.SongListItem)instance;
            return that.ViewType;
        }
        private void set_9_SongListItem_ViewType(object instance, object Value)
        {
            var that = (global::MusicMink.ListItems.SongListItem)instance;
            that.ViewType = (global::MusicMink.ListItems.SongListItemView)Value;
        }
        private object get_10_ReorderModeToBoolConverter_Invert(object instance)
        {
            var that = (global::MusicMink.Converters.ReorderModeToBoolConverter)instance;
            return that.Invert;
        }
        private void set_10_ReorderModeToBoolConverter_Invert(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.ReorderModeToBoolConverter)instance;
            that.Invert = (global::System.Boolean)Value;
        }
        private object get_11_PercentageTransformConverter_FullTarget(object instance)
        {
            var that = (global::MusicMink.Converters.PercentageTransformConverter)instance;
            return that.FullTarget;
        }
        private void set_11_PercentageTransformConverter_FullTarget(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.PercentageTransformConverter)instance;
            that.FullTarget = (global::System.Int32)Value;
        }
        private object get_12_BoolToObjectConverter_ValueIfTrue(object instance)
        {
            var that = (global::MusicMink.Converters.BoolToObjectConverter)instance;
            return that.ValueIfTrue;
        }
        private void set_12_BoolToObjectConverter_ValueIfTrue(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.BoolToObjectConverter)instance;
            that.ValueIfTrue = (global::System.Boolean)Value;
        }
        private object get_13_BoolToObjectConverter_ValueIfFalse(object instance)
        {
            var that = (global::MusicMink.Converters.BoolToObjectConverter)instance;
            return that.ValueIfFalse;
        }
        private void set_13_BoolToObjectConverter_ValueIfFalse(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.BoolToObjectConverter)instance;
            that.ValueIfFalse = (global::System.Boolean)Value;
        }
        private object get_14_NumericTransformConverter_Margin(object instance)
        {
            var that = (global::MusicMink.Converters.NumericTransformConverter)instance;
            return that.Margin;
        }
        private void set_14_NumericTransformConverter_Margin(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.NumericTransformConverter)instance;
            that.Margin = (global::System.Int32)Value;
        }
        private object get_15_NumericTransformConverter_Sections(object instance)
        {
            var that = (global::MusicMink.Converters.NumericTransformConverter)instance;
            return that.Sections;
        }
        private void set_15_NumericTransformConverter_Sections(object instance, object Value)
        {
            var that = (global::MusicMink.Converters.NumericTransformConverter)instance;
            that.Sections = (global::System.Int32)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MusicMink.MusicMink_XamlTypeInfo.XamlMember xamlMember = null;
            global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MusicMink.Converters.BoolToVisibilityConverter.Invert":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.BoolToVisibilityConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Invert", "Boolean");
                xamlMember.Getter = get_0_BoolToVisibilityConverter_Invert;
                xamlMember.Setter = set_0_BoolToVisibilityConverter_Invert;
                break;
            case "MusicMink.Controls.ScalingTextBox.Foreground":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.ScalingTextBox");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ScalingTextBox_Foreground;
                xamlMember.Setter = set_1_ScalingTextBox_Foreground;
                break;
            case "MusicMink.Controls.ScalingTextBox.Text":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.ScalingTextBox");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ScalingTextBox_Text;
                xamlMember.Setter = set_2_ScalingTextBox_Text;
                break;
            case "MusicMink.Controls.ScalingTextBox.MaxFontSize":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.ScalingTextBox");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "MaxFontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ScalingTextBox_MaxFontSize;
                xamlMember.Setter = set_3_ScalingTextBox_MaxFontSize;
                break;
            case "MusicMink.Controls.ScalingTextBox.MinFontSize":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.ScalingTextBox");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "MinFontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ScalingTextBox_MinFontSize;
                xamlMember.Setter = set_4_ScalingTextBox_MinFontSize;
                break;
            case "MusicMink.Controls.StarRater.BorderColor":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.StarRater");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "BorderColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_StarRater_BorderColor;
                xamlMember.Setter = set_5_StarRater_BorderColor;
                break;
            case "MusicMink.Controls.StarRater.StarColor":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.StarRater");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "StarColor", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_StarRater_StarColor;
                xamlMember.Setter = set_6_StarRater_StarColor;
                break;
            case "MusicMink.Controls.StarRater.Rating":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Controls.StarRater");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Rating", "UInt32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_StarRater_Rating;
                xamlMember.Setter = set_7_StarRater_Rating;
                break;
            case "MusicMink.Converters.IntegerToVisibilityConverter.PivotPoint":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.IntegerToVisibilityConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "PivotPoint", "Int32");
                xamlMember.Getter = get_8_IntegerToVisibilityConverter_PivotPoint;
                xamlMember.Setter = set_8_IntegerToVisibilityConverter_PivotPoint;
                break;
            case "MusicMink.ListItems.SongListItem.ViewType":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.ListItems.SongListItem");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "ViewType", "MusicMink.ListItems.SongListItemView");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_SongListItem_ViewType;
                xamlMember.Setter = set_9_SongListItem_ViewType;
                break;
            case "MusicMink.Converters.ReorderModeToBoolConverter.Invert":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.ReorderModeToBoolConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Invert", "Boolean");
                xamlMember.Getter = get_10_ReorderModeToBoolConverter_Invert;
                xamlMember.Setter = set_10_ReorderModeToBoolConverter_Invert;
                break;
            case "MusicMink.Converters.PercentageTransformConverter.FullTarget":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.PercentageTransformConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "FullTarget", "Int32");
                xamlMember.Getter = get_11_PercentageTransformConverter_FullTarget;
                xamlMember.Setter = set_11_PercentageTransformConverter_FullTarget;
                break;
            case "MusicMink.Converters.BoolToObjectConverter.ValueIfTrue":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.BoolToObjectConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "ValueIfTrue", "Boolean");
                xamlMember.Getter = get_12_BoolToObjectConverter_ValueIfTrue;
                xamlMember.Setter = set_12_BoolToObjectConverter_ValueIfTrue;
                break;
            case "MusicMink.Converters.BoolToObjectConverter.ValueIfFalse":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.BoolToObjectConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "ValueIfFalse", "Boolean");
                xamlMember.Getter = get_13_BoolToObjectConverter_ValueIfFalse;
                xamlMember.Setter = set_13_BoolToObjectConverter_ValueIfFalse;
                break;
            case "MusicMink.Converters.NumericTransformConverter.Margin":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.NumericTransformConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Margin", "Int32");
                xamlMember.Getter = get_14_NumericTransformConverter_Margin;
                xamlMember.Setter = set_14_NumericTransformConverter_Margin;
                break;
            case "MusicMink.Converters.NumericTransformConverter.Sections":
                userType = (global::MusicMink.MusicMink_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicMink.Converters.NumericTransformConverter");
                xamlMember = new global::MusicMink.MusicMink_XamlTypeInfo.XamlMember(this, "Sections", "Int32");
                xamlMember.Getter = get_15_NumericTransformConverter_Sections;
                xamlMember.Setter = set_15_NumericTransformConverter_Sections;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MusicMink.MusicMink_XamlTypeInfo.XamlSystemBaseType
    {
        global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MusicMink.MusicMink_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


